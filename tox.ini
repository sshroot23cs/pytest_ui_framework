[tox]
# Tox Configuration for Pytest UI Automation Framework
# Provides multiple test environments and execution strategies

envlist = 
    py312-chrome,
    py312-firefox,
    py312-headless-chrome,
    py312-headless-firefox,
    py312-parallel,
    py312-e2e-full,
    lint,
    format-check,
    allure-report,
    validate-framework

skip_missing_interpreters = true
isolated_build = false

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.12: py312-chrome, py312-firefox, lint, format-check

[testenv]
# Base test environment configuration
skip_install = true
deps = 
    -r requirements.txt
    pytest-xdist
    pytest-html
    allure-pytest
    flake8
    black
    isort

# Environment variables for all test environments
setenv = 
    PYTHONPATH = {toxinidir}
    HEADLESS = false
    
# Change directory to project root
changedir = {toxinidir}

# Base commands - can be overridden in specific environments
commands = python -m pytest tests/test_e2e_search.py -v

[testenv:py312-chrome]
# Chrome browser testing environment
description = Run E2E tests with Chrome browser
setenv = 
    {[testenv]setenv}
    BROWSER = chrome
    
commands = 
    python -m pytest tests/test_e2e_search.py -v \
        --browser=chrome \
        --alluredir=reports/allure-results-chrome \
        --html=reports/html-report-chrome.html \
        --self-contained-html \
        --junitxml=reports/junit-chrome.xml

[testenv:py312-firefox]
# Firefox browser testing environment
description = Run E2E tests with Firefox browser
setenv = 
    {[testenv]setenv}
    BROWSER = firefox
    
commands = 
    python -m pytest tests/test_e2e_search.py -v \
        --browser=firefox \
        --alluredir=reports/allure-results-firefox \
        --html=reports/html-report-firefox.html \
        --self-contained-html \
        --junitxml=reports/junit-firefox.xml

[testenv:py312-headless-chrome]
# Headless Chrome testing environment
description = Run E2E tests with headless Chrome browser
setenv = 
    {[testenv]setenv}
    BROWSER = chrome
    HEADLESS = true
    
commands = 
    python -m pytest tests/test_e2e_search.py -v \
        --browser=chrome \
        --headless \
        --alluredir=reports/allure-results-headless-chrome \
        --html=reports/html-report-headless-chrome.html \
        --self-contained-html \
        --junitxml=reports/junit-headless-chrome.xml

[testenv:py312-headless-firefox]
# Headless Firefox testing environment
description = Run E2E tests with headless Firefox browser
setenv = 
    {[testenv]setenv}
    BROWSER = firefox
    HEADLESS = true
    
commands = 
    python -m pytest tests/test_e2e_search.py -v \
        --browser=firefox \
        --headless \
        --alluredir=reports/allure-results-headless-firefox \
        --html=reports/html-report-headless-firefox.html \
        --self-contained-html \
        --junitxml=reports/junit-headless-firefox.xml

[testenv:py312-parallel]
# Parallel test execution environment
description = Run E2E tests in parallel with pytest-xdist
setenv = 
    {[testenv]setenv}
    BROWSER = chrome
    HEADLESS = true
    
commands = 
    python -m pytest tests/test_e2e_search.py -v \
        --browser=chrome \
        --headless \
        -n auto \
        --alluredir=reports/allure-results-parallel \
        --html=reports/html-report-parallel.html \
        --self-contained-html \
        --junitxml=reports/junit-parallel.xml

[testenv:py312-e2e-full]
# Full E2E test suite environment
description = Run all E2E tests across multiple browsers
setenv = 
    {[testenv]setenv}
    HEADLESS = true
    
commands = 
    # Chrome tests
    python -m pytest tests/test_e2e_search.py -v \
        --browser=chrome \
        --headless \
        --alluredir=reports/allure-results-full/chrome \
        --junitxml=reports/junit-full-chrome.xml
    
    # Firefox tests  
    python -m pytest tests/test_e2e_search.py -v \
        --browser=firefox \
        --headless \
        --alluredir=reports/allure-results-full/firefox \
        --junitxml=reports/junit-full-firefox.xml
    
    # Generate combined HTML report
    python -m pytest tests/test_e2e_search.py -v \
        --browser=chrome \
        --headless \
        --html=reports/html-report-full.html \
        --self-contained-html

[testenv:lint]
# Code linting environment
description = Run code quality checks (flake8)
deps = 
    flake8
    flake8-docstrings
    
commands = 
    flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
    flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

[testenv:format-check]
# Code formatting check environment
description = Check code formatting with Black and isort
deps = 
    black
    isort
    
commands = 
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/

[testenv:format]
# Code formatting environment
description = Format code with Black and isort
deps = 
    black
    isort
    
commands = 
    black src/ tests/
    isort src/ tests/

[testenv:allure-report]
# Allure report generation environment
description = Generate Allure reports from existing results
allowlist_externals = 
    allure
    
commands = 
    allure generate reports/allure-results -o reports/allure-report --clean

[testenv:allure-serve]
# Allure report serving environment
description = Generate and serve Allure reports
allowlist_externals = 
    allure
    
commands = 
    allure serve reports/allure-results

[testenv:validate-framework]
# Framework validation environment
description = Validate framework setup and configuration
commands = 
    python validate_framework.py

[testenv:clean]
# Clean environment for removing generated files
description = Clean all generated reports and cache files
allowlist_externals = 
    rm
    rmdir
    del
    
commands = 
    python -c "import shutil, os; [shutil.rmtree(p, ignore_errors=True) for p in ['reports', '.pytest_cache', '.tox', '__pycache__']]"

[testenv:install-browsers]
# Browser installation environment (for CI/CD)
description = Install required browser drivers
deps = 
    {[testenv]deps}
    webdriver-manager
    
commands = 
    python -c "from webdriver_manager.chrome import ChromeDriverManager; ChromeDriverManager().install()"
    python -c "from webdriver_manager.firefox import GeckoDriverManager; GeckoDriverManager().install()"

# Flake8 configuration
[flake8]
max-line-length = 127
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv
    
ignore = 
    E203,  # whitespace before ':'
    W503,  # line break before binary operator
    
per-file-ignores = 
    tests/*:F401,F811  # Allow unused imports in test files

# Black configuration
[tool:black]
line-length = 127
target-version = py312

# isort configuration  
[tool:isort]
profile = black
multi_line_output = 3
line_length = 127
known_first_party = src
known_third_party = pytest,selenium,allure

# Coverage configuration (optional)
[coverage:run]
source = src/
omit = 
    */tests/*
    */venv/*
    */.tox/*
    
[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError